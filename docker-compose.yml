version: '3.8'

services:
  k6:
    image: ${IMAGES_PREFIX:-}k6:${PROJECT_VERSION}
    build:
      context: docker/k6
    volumes:
      - ./docker/k6/script.js:/etc/script.js
    command: run /etc/script.js
    environment:
      WEB_HOST: caddy
    restart: always
    depends_on:
      caddy:
        condition: service_started
    profiles:
      - live
  otelcol:
    image: ${IMAGES_PREFIX:-}otelcol:${PROJECT_VERSION}
    build:
      context: docker/otelcol
    ports:
      - 1888 # pprof extension
      - 8888 # Prometheus metrics exposed by the collector
      - 8889 # Prometheus exporter metrics
      - 13133 # health_check extension
      - 4317 # OTLP gRPC receiver
      - 4318 # OTLP http receiver
    environment:
      - GRAFANA_OTLP_ENDPOINT
      - GRAFANA_INSTANCE_ID
      - GRAFANA_CLOUD_APIKEY
    profiles:
      - live
  php_cache:
    image: ${IMAGES_PREFIX:-}php-cache
    build:
      context: .
      target: php_base
      cache_from:
        - ${IMAGES_PREFIX:-}php-cache
    profiles:
      - no-start
  php:
    image: ${IMAGES_PREFIX:-}app-php:${PROJECT_VERSION}
    build:
      context: .
      cache_from:
        - ${IMAGES_PREFIX:-}php-cache
    restart: unless-stopped
    volumes:
      - php_socket:/var/run/php
    environment:
      OTEL_PHP_AUTOLOAD_ENABLED: 'true'
      OTEL_SERVICE_NAME: faros-shop
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otelcol:4317
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=faros-shop,service.instance.id=1234
      OTEL_PROPAGATORS: baggage,tracecontext
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
      TRUSTED_HOSTS: ^${SERVER_NAME:-example\.com|localhost}|caddy$$
      # The two next lines can be removed after initial installation
      SYMFONY_VERSION: ${SYMFONY_VERSION:-}
      STABILITY: ${STABILITY:-stable}
      # Run "composer require symfony/orm-pack" to install and configure Doctrine ORM
      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-15}&charset=${POSTGRES_CHARSET:-utf8}
      # Run "composer require symfony/mercure-bundle" to install and configure the Mercure integration
      MERCURE_URL: ${CADDY_MERCURE_URL:-http://caddy/.well-known/mercure}
      MERCURE_PUBLIC_URL: https://${SERVER_NAME:-localhost}/.well-known/mercure
      MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
  caddy:
    image: ${IMAGES_PREFIX:-}app-caddy:${PROJECT_VERSION}
    depends_on:
      php:
        condition: service_healthy
        restart: true
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}, caddy:80
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
    restart: unless-stopped
    volumes:
      - php_socket:/var/run/php
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp
###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

# Mercure is installed as a Caddy module, prevent the Flex recipe from installing another service
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###

volumes:
  php_socket:
  caddy_data:
  caddy_config:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
