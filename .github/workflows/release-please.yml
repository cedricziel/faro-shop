on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGES_PREFIX: ghcr.io/${{ github.repository }}-

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

name: release-please

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4.1.5
        id: release
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          config-file: release-please-config.json
    outputs:
      app_release_created: ${{ steps.release.outputs.release_created }}
      app_release_tag_name: ${{ steps.release.outputs.tag_name }}
      helm_release_created: ${{ steps.release.outputs['k8s/charts/faro-shop--release_created'] }}
      helm_release_tag_name: ${{ steps.release.outputs['k8s/charts/faro-shop--tag_name'] }}
      php_release_created: ${{ steps.release.outputs['docker/php--release_created'] }}
      php_release_tag_name: ${{ steps.release.outputs['docker/php--tag_name'] }}
      php_release_major: ${{ steps.release.outputs['docker/php--major'] }}
      php_release_minor: ${{ steps.release.outputs['docker/php--minor'] }}
      php_release_patch: ${{ steps.release.outputs['docker/php--patch'] }}

  build-base-image:
    runs-on: ubuntu-latest
    needs:
      - release-please
    if: ${{ needs.release-please.outputs.php_release_created }}
    steps:
      - name: Fetch source from event
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base image
        uses: docker/build-push-action@v6
        with:
          context: docker/php
          platforms: linux/amd64,linux/arm64
          push: true
          pull: true
          target: php_base
          tags: |
            ghcr.io/${{ github.repository }}-php:${{ needs.release-please.outputs.php_release_major }}.${{ needs.release-please.outputs.php_release_minor }}.${{ needs.release-please.outputs.php_release_patch }}
            ghcr.io/${{ github.repository }}-php:latest
          cache-from: |
            ghcr.io/${{ github.repository }}-php:latest
            type=gha
          cache-to: type=gha

      - name: Build and push dev image
        uses: docker/build-push-action@v6
        with:
          context: docker/php
          platforms: linux/amd64,linux/arm64
          push: true
          pull: true
          target: php_dev
          tags: |
            ghcr.io/${{ github.repository }}-php:${{ needs.release-please.outputs.php_release_major }}.${{ needs.release-please.outputs.php_release_minor }}.${{ needs.release-please.outputs.php_release_patch }}-dev
            ghcr.io/${{ github.repository }}-php:latest-dev
          cache-from: |
            ghcr.io/${{ github.repository }}-php:latest-dev
            type=gha
          cache-to: type=gha

  release_asset:
    needs:
      - release-please
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.helm_release_created }}
    steps:
      # Add Helm Chart to Release
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Package Helm Chart
        uses: WyriHaximus/github-action-helm3@v4
        with:
          exec: helm package k8s/charts/faro-shop
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ needs.release-please.outputs.helm_release_tag_name }} ${{ needs.release-please.outputs.helm_release_tag_name }}.tgz
      - uses: actions/upload-artifact@v4
        with:
          name: chart-archive
          path: ${{ needs.release-please.outputs.helm_release_tag_name }}.tgz

  release_chart:
    needs:
      - release-please
      - release_asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - uses: actions/download-artifact@v4
        with:
          name: chart-archive

      - name: Package Helm Chart
        uses: WyriHaximus/github-action-helm3@v4
        with:
          exec: helm repo index . --merge index.yaml --url https://github.com/cedricziel/faro-shop/releases/download/${{ needs.release-please.outputs.helm_release_tag_name }}/

      - run: rm *.tgz

      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          message: "Update helm repo for version ${{ needs.release-please.outputs.helm_release_tag_name }}"

      - name: Sleep for 3 minutes
        run: sleep 180s
        shell: bash
          
  deploy_to_appo11y:
    environment: appo11y
    needs:
      - release_chart
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Helm Upgrade
        uses: appleboy/ssh-action@v1.2.1
        env:
          FARO_URL: ${{ secrets.APPO11Y_FARO_URL }}
          K6_CLOUD_TOKEN: ${{ secrets.APPO11Y_K6_TOKEN }}
        with:
          envs: FARO_URL,K6_CLOUD_TOKEN,APPO11Y_CLOUD_PROJECT_ID,APPO11Y_CLOUD_TEST_ID
          host: ${{ secrets.APPO11Y_DEPLOY_HOST }}
          username: ${{ secrets.APPO11Y_DEPLOY_USERNAME }}
          key: ${{ secrets.APPO11Y_DEPLOY_KEY }}
          port: 22
          script: |
            helm repo add faro-shop https://cedricziel.github.io/faro-shop
            helm repo update
            helm upgrade --install --atomic --timeout 300s faro-shop faro-shop/faro-shop \
              --create-namespace --namespace faro-shop \
              --set caddy.env.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://grafana-k8s-monitoring-grafana-agent.default.svc.cluster.local:4317 \
              --set app.env.OTEL_EXPORTER_OTLP_ENDPOINT=http://grafana-k8s-monitoring-grafana-agent.default.svc.cluster.local:4318 \
              --set worker.env.OTEL_EXPORTER_OTLP_ENDPOINT=http://grafana-k8s-monitoring-grafana-agent.default.svc.cluster.local:4318 \
              --set app.env.FARO_URL=$FARO_URL

  # Release App
  assets:
    name: Assets
    runs-on: ubuntu-latest
    needs:
      - release-please
    if: ${{ needs.release-please.outputs.app_release_created }}

    steps:
      - name: Fetch source from event
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-cache-node-modules-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-node-modules-

      - name: NPM install
        if: steps.npm-cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: NPM build
        run: npm run build
        env:
          FARO_API_KEY: ${{ secrets.FARO_API_KEY }}
          FARO_APP_NAME: ${{ vars.FARO_APP_NAME }}
          FARO_SOURCEMAP_ENDPOINT: ${{ vars.FARO_SOURCEMAP_ENDPOINT }}
          FARO_APP_ID: ${{ vars.FARO_APP_ID }}
          FARO_STACK_ID: ${{ vars.FARO_STACK_ID }}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: public/build

  build-test-push:
    runs-on: ubuntu-latest
    needs:
      - release-please
      - assets
    if: success()
    permissions:
      contents: read
      packages: write
    steps:
      - name: Fetch source from event
        uses: actions/checkout@v4

      - run: cp env.template .env
        shell: bash

      - name: Download assets
        uses: actions/download-artifact@v4
        with:
          name: build
          path: public/build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push - k6
        uses: docker/build-push-action@v6
        with:
          context: docker/k6
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGES_PREFIX }}k6:${{ needs.release-please.outputs.app_release_tag_name }},${{ env.IMAGES_PREFIX }}k6:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push - otelcol
        uses: docker/build-push-action@v6
        with:
          context: docker/otelcol
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGES_PREFIX }}otelcol:${{ needs.release-please.outputs.app_release_tag_name }},${{ env.IMAGES_PREFIX }}otelcol:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push - php
        uses: docker/build-push-action@v6
        with:
          context: .
          target: php_dev
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGES_PREFIX }}app-php:${{ needs.release-please.outputs.app_release_tag_name }},${{ env.IMAGES_PREFIX }}app-php:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push - php-prod
        uses: docker/build-push-action@v6
        with:
          context: .
          target: php_prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGES_PREFIX }}app-php:${{ needs.release-please.outputs.app_release_tag_name }}-prod,${{ env.IMAGES_PREFIX }}app-php:latest-prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push - caddy
        uses: docker/build-push-action@v6
        with:
          context: .
          target: caddy_base
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGES_PREFIX }}app-caddy:${{ needs.release-please.outputs.app_release_tag_name }},${{ env.IMAGES_PREFIX }}app-caddy:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push - caddy-prod
        uses: docker/build-push-action@v6
        with:
          context: .
          target: caddy_prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGES_PREFIX }}app-caddy:${{ needs.release-please.outputs.app_release_tag_name }}-prod,${{ env.IMAGES_PREFIX }}app-caddy:latest-prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

  bump_pr:
    needs:
      - release-please
      - build-test-push
    runs-on: ubuntu-latest
    steps:
      - name: Fetch source from event
        uses: actions/checkout@v4

      - name: Bump appVersion in chart
        uses: mikefarah/yq@master
        with:
            cmd: yq -i '.appVersion = "${{ needs.release-please.outputs.app_release_tag_name }}"' 'k8s/charts/faro-shop/Chart.yaml'

      - name: Package Helm Chart
        uses: WyriHaximus/github-action-helm3@v4
        with:
          exec: helm template faro-shop k8s/charts/faro-shop > k8s/charts/faro-shop/rendered.yaml

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          assignees: cedricziel
          token: ${{ secrets.RELEASE_TOKEN }}
          branch: update-app-in-helm-chart
          branch-suffix: random
          title: 'feat: Bump app to ${{ needs.release-please.outputs.app_release_tag_name }}'
          commit-message: 'feat: Bump app to ${{ needs.release-please.outputs.app_release_tag_name }}'
          add-paths: |
            k8s/charts/faro-shop/Chart.yaml
            k8s/charts/faro-shop/rendered.yaml
      - name: Approve bump PR
        run: gh pr merge $PR --squash --auto
        if: ${{ steps.cpr.outputs.pull-request-number }}
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          PR: ${{ steps.cpr.outputs.pull-request-number }}
