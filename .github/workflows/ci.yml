name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGES_PREFIX: ghcr.io/${{ github.repository }}-

jobs:
  bump:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    name: Bump version
    outputs:
      bumped_sha: ${{ steps.sha.outputs.SHA }}
      new_version: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3

      - name: Bump version
        uses: remorses/bump-version@js
        with:
          version_file: ./VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.ref == 'refs/heads/main'

      - name: Get Version
        id: version
        run: |
          echo ::set-output name=VERSION::$(cat ./VERSION)
        if: github.ref == 'refs/heads/main'

      - name: Push changes to main
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true
        if: github.ref == 'refs/heads/main'
      - name: get sha
        id: sha
        run: |
          sha_new=$(git rev-parse HEAD)
          echo $sha_new
          echo "::set-output name=SHA::$sha_new"
        if: github.ref == 'refs/heads/main'
      - run:
          echo ${{ steps.sha.outputs.SHA }}
        if: github.ref == 'refs/heads/master'

  tests:
    name: Tests
    runs-on: ubuntu-latest

    needs: bump

    permissions:
      contents: read
      packages: write

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      -
        name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      -
        name: Build Docker images
        uses: docker/bake-action@v3
        with:
          pull: true
          load: true
          files: |
            docker-compose.yml
            docker-compose.override.yml
          set: |
            *.cache-from=type=gha,scope=${{github.ref}}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{github.ref}},mode=max
      -
        name: Start services
        run: docker compose up --wait --no-build
      -
        name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost
      -
        name: Check HTTPS reachability
        run: curl -vk -o /dev/null https://localhost
      -
        name: Create test database
        run: docker compose exec -T php bin/console -e test doctrine:database:create
      -
        name: Run migrations
        run: docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      -
        name: Run PHPUnit
        if: false # Remove this line if PHPUnit is installed
        run: docker compose exec -T php bin/phpunit
      -
        name: Doctrine Schema Validator
        if: false # Remove this line if Doctrine ORM is installed
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate
  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
  build-images:
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
    if: success() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}-app-caddy
            ghcr.io/${{ github.repository }}-app-php
            ghcr.io/${{ github.repository }}-php-cache
            ghcr.io/${{ github.repository }}-database
            ghcr.io/${{ github.repository }}-otelcol

      - name: Build Docker images
        uses: docker/bake-action@v3
        with:
          push: true
          files: |
            ${{ steps.docker-metadata.outputs.bake-file }}
            docker-compose.yml
            docker-compose.override.yml
          set: |
            *.cache-from=type=gha,scope=${{github.ref}}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{github.ref}},mode=max

  create_release:
    needs:
      - bump
      - build-images
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump.outputs.SHA }}
          fetch-depth: 0

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ needs.bump.outputs.new_version }} \
            --title "v${{ needs.bump.outputs.new_version }}" \
            --generate-notes
    if: github.ref == 'refs/heads/main'
