name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGES_PREFIX: ghcr.io/${{ github.repository }}-

jobs:
  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0

  bump:
    runs-on: ubuntu-latest
    needs:
      - lint

    permissions:
      contents: write

    name: Bump version
    outputs:
      bumped_sha: ${{ steps.sha.outputs.SHA }}
      new_version: ${{ steps.version.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v3

      - name: Bump version
        uses: remorses/bump-version@js
        with:
          version_file: ./VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.ref == 'refs/heads/main'

      - name: Get Version
        id: version
        run: |
          version=$(cat ./VERSION)
          echo $version
          echo "VERSION=$version" >> $GITHUB_OUTPUT
        if: github.ref == 'refs/heads/main'

      - name: Push changes to main
        run: |
          git tag -f ${{ steps.version.outputs.VERSION }}
          git push -f origin --tags
        if: github.ref == 'refs/heads/main'
      - name: get sha
        id: sha
        run: |
          sha_new=$(git rev-parse HEAD)
          echo $sha_new
          echo "SHA=$sha_new" >> $GITHUB_OUTPUT
        if: github.ref == 'refs/heads/main'

  assets:
    name: Assets
    runs-on: ubuntu-latest

    needs: bump

    steps:
      - name: Fetch updated source through SHA from bump
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump.outputs.bumped_sha }}
          fetch-depth: 0
        if: github.ref == 'refs/heads/main'

      - name: Fetch source from event
        uses: actions/checkout@v3
        if: github.ref != 'refs/heads/main'

      - name: Cache node_modules
        uses: actions/cache@v1
        id: npm-cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-cache-node-modules-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-node-modules-

      - name: NPM install
        if: steps.npm-cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: NPM build
        run: npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: public/build

  build-images:
    runs-on: ubuntu-latest
    needs:
      - bump
      - assets
    if: success()
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - k6
          - otelcol
          - php
          - caddy
          - database
        platform:
          - linux/amd64
          - linux/arm64
    env:
      DOCKER_DEFAULT_PLATFORM: ${{ matrix.platform }}
    steps:
      - name: Fetch updated source through SHA from bump
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump.outputs.bumped_sha }}
          fetch-depth: 0
        if: github.ref == 'refs/heads/main'

      - name: Fetch source from event
        uses: actions/checkout@v3
        if: github.ref != 'refs/heads/main'

      - run: cp env.template .env
        shell: bash

      - name: Download assets
        uses: actions/download-artifact@v4
        with:
          name: build
          path: public/build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull service ${{matrix.service}}
        run: docker compose -f docker-compose.yml -f docker-compose.override.yml pull --ignore-pull-failures ${{matrix.service}}

      - name: Build service ${{matrix.service}}
        run: docker compose -f docker-compose.yml -f docker-compose.override.yml build ${{matrix.service}}

      - name: Pull service ${{matrix.service}} (prod)
        run: docker compose -f docker-compose.yml -f docker-compose.prod.yml pull --ignore-pull-failures ${{matrix.service}}

      - name: Build service ${{matrix.service}} (prod)
        run: docker-compose -f docker-compose.yml -f docker-compose.prod.yml build ${{matrix.service}}

  tests:
    name: Tests
    runs-on: ubuntu-latest
    if: success()

    needs:
      - bump
      - assets
      - build-images

    permissions:
      contents: read
      packages: write

    steps:
      - name: Fetch updated source through SHA from bump
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump.outputs.bumped_sha }}
          fetch-depth: 0
        if: github.ref == 'refs/heads/main'

      - name: Fetch source from event
        uses: actions/checkout@v3
        if: github.ref != 'refs/heads/main'

      - name: Download assets
        uses: actions/download-artifact@v4
        with:
          name: build
          path: public/build

      - run: cp env.template .env
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start services
        run: docker compose up --wait --no-build

      - name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost

      - name: Check HTTPS reachability
        run: curl -vk -o /dev/null https://localhost

      - name: Create test database
        run: docker compose exec -T php bin/console -e test doctrine:database:create

      - name: Run migrations
        run: docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction

      - name: Run PHPUnit
        if: false # Remove this line if PHPUnit is installed
        run: docker compose exec -T php bin/phpunit

      - name: Doctrine Schema Validator
        if: false # Remove this line if Doctrine ORM is installed
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate

  push_images:
    runs-on: ubuntu-latest
    needs:
      - bump
      - tests
      - build-images
    if: success() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - k6
          - otelcol
          - php
          - caddy
          - database
        platform:
          - linux/amd64
          - linux/arm64
    env:
      DOCKER_DEFAULT_PLATFORM: ${{ matrix.platform }}
    steps:
      - name: Fetch updated source through SHA from bump
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump.outputs.bumped_sha }}
          fetch-depth: 0
        if: github.ref == 'refs/heads/main'

      - name: Fetch source from event
        uses: actions/checkout@v3
        if: github.ref != 'refs/heads/main'

      - run: cp env.template .env
        shell: bash

      - name: Download assets
        uses: actions/download-artifact@v4
        with:
          name: build
          path: public/build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull service ${{matrix.service}}
        run: docker compose -f docker-compose.yml -f docker-compose.override.yml pull --ignore-pull-failures ${{matrix.service}}

      - name: Build service ${{matrix.service}}
        run: docker compose -f docker-compose.yml -f docker-compose.override.yml build ${{matrix.service}}

      - name: Push service ${{matrix.service}}
        run: docker-compose -f docker-compose.yml -f docker-compose.override.yml push ${{matrix.service}}

      - name: Pull service ${{matrix.service}} (prod)
        run: docker compose -f docker-compose.yml -f docker-compose.prod.yml pull --ignore-pull-failures ${{matrix.service}}

      - name: Build service ${{matrix.service}} (prod)
        run: docker-compose -f docker-compose.yml -f docker-compose.prod.yml build ${{matrix.service}}

      - name: Push service ${{matrix.service}} (prod)
        run: docker-compose -f docker-compose.yml -f docker-compose.prod.yml push ${{matrix.service}}

  create_release:
    if: success() && github.ref == 'refs/heads/main'
    needs:
      - bump
      - push_images
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump.outputs.bumped_sha }}
          fetch-depth: 0

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          gh release create ${{ needs.bump.outputs.new_version }} \
            --title "v${{ needs.bump.outputs.new_version }}" \
            --verify-tag \
            --generate-notes
