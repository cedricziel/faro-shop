#!/usr/bin/env php
<?php

use App\Kernel;
use OpenTelemetry\API\Instrumentation\CachedInstrumentation;
use OpenTelemetry\API\Trace\Span;
use OpenTelemetry\Context\Context;
use Symfony\Bundle\FrameworkBundle\Console\Application;

if (!is_dir(dirname(__DIR__).'/vendor')) {
    throw new LogicException('Dependencies are missing. Try running "composer install".');
}

if (!is_file(dirname(__DIR__).'/vendor/autoload_runtime.php')) {
    throw new LogicException('Symfony Runtime is missing. Try running "composer require symfony/runtime".');
}

require_once dirname(__DIR__).'/vendor/autoload_runtime.php';

$instrumentation = new CachedInstrumentation('io.opentelemetry.contrib.php.symfony');

\OpenTelemetry\Instrumentation\hook(
    \Symfony\Component\Messenger\Worker::class,
    'handleMessage',
    pre: static function(
        \Symfony\Component\Messenger\Worker $worker,
        array            $params,
        string           $class,
        string           $function,
        ?string          $filename,
        ?int             $lineno,
    ) use ($instrumentation) {
        /** @var \Symfony\Component\Messenger\Envelope $envelope */
        $envelope = $params[0];

        $spanBuilder = $instrumentation->tracer()
            ->spanBuilder('consume ' . get_class($envelope->getMessage()))
            ->setSpanKind(\OpenTelemetry\API\Trace\SpanKind::KIND_CONSUMER)
            ->setAttributes([
                'peer.service' => 'amqp',
                'messenger.worker.class' => $class,
                'messenger.worker.function' => $function,
            ]);

        /** @var ?\App\O11y\OpenTelemetryStamp $stamp */
        $stamp = $envelope->last(\App\O11y\OpenTelemetryStamp::class);
        if (null !== $stamp) {
            $prop = \OpenTelemetry\API\Globals::propagator();
            $parent = $prop->extract($stamp);

            $spanBuilder->setParent($parent);
        }

        $span = $spanBuilder->startSpan();
        $span->addEvent('messenger.worker.start');

        $parent = Context::getCurrent();

        Context::storage()->attach($span->storeInContext($parent));
    },
    post: static function(
        \Symfony\Component\Messenger\Worker $worker,
        array            $params,
        string           $class,
        string           $function,
        ?string          $filename,
        ?int             $lineno,
        mixed            $result,
        ?\Throwable      $exception,
    ) use ($instrumentation) {
        $scope = Context::storage()->scope();
        if (null === $scope) {
            return;
        }
        $scope->detach();
        $span = Span::fromContext($scope->context());

        $span->addEvent('messenger.worker.finish');

        if ($exception instanceof \Throwable) {
            $span->recordException($exception);
        }
        $span->end();
    }
);

return function (array $context) {
    $kernel = new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);

    return new Application($kernel);
};
